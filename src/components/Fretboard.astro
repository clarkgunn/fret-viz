---
// export interface Props {
// 	title: string;
// 	body: string;
// 	href: string;
// }

// const { href, title, body } = Astro.props;
---

<figure id="fretboard"></figure>

<style>
  .dot-text {
    letter-spacing: -3px;
  }
</style>

<script>
  import { Fretboard } from '@moonwave99/fretboard.js';
  import { Note, Interval } from 'tonal';
  import { getIntervallicFunction } from '../utils';

  const colors = {
    defaultFill: 'white',
    defaultActiveFill: '#ff636c',
    defaultStroke: 'black',
    defaultActiveStroke: '#ff636c',
    disabled: '#aaa',
    primaryFill: '#3273dc',
    intervals: {
      '1P': '#F25116',
      '2M': '#FCFF6C',
      '2m': '#FCFF6C',
      '3m': '#F29727',
      '3M': '#F29727',
      '4P': '#2FABEE',
      '4A': '#2FABEE',
      '5P': '#D89D6A',
      '5A': '#D89D6A',
      '6M': '#D7FFAB',
      '6m': '#D7FFAB',
      '7M': '#96ADC8',
      '7m': '#96ADC8',
    },
    octaves: ['#70D6FF', '#FFBE0B', '#E9FF70', '#FF70A6', '#6ae674'],
    chordTypes: {
      maj7: '#00bbf9',
      '7': '#F25116',
      m7: '#F29727',
      m7b5: '#8338ec',
    },
    modes: {
      ionian: '#e76f51',
      dorian: '#6a994e',
      phrygian: '#8338ec',
      lydian: '#ffbd00',
      mixolydian: '#e36414',
      aeolian: '#00bbf9',
      locrian: '#1D5DF2',
    },
  };

  let key = 'A';
  let scale = 'minor';
  let indicator = 'intervallic-function';
  let color = colors.defaultActiveStroke;
  let progressiveDisclosure = false;
  let interval = 3;

  let fretboard = new Fretboard({
    // dotText: ({ note }) => note,
    dotStrokeColor: (dot) => (dot.input ? color : colors.defaultStroke),
  });

  window.fretboard = fretboard;

  function render(dots) {
    if (dots) {
      fretboard
        .setDots(dots)
        .render()
        .style({
          text: (dot) => {
            if (progressiveDisclosure && !dot.close) return;

            return indicator === 'intervallic-function'
              ? getIntervallicFunction(dot.interval)
              : dot[indicator];
          },
          fill: (dot) => (dot.input ? color : 'white'),
        });
    } else {
      fretboard
        .renderScale({
          type: scale,
          root: key,
        })
        .style({
          text: (dot) => {
            if (progressiveDisclosure && !dot.close) return;

            return indicator === 'intervallic-function'
              ? getIntervallicFunction(dot.interval)
              : dot[indicator];
          },
          fill: (dot) => (dot.input ? color : 'white'),
        });
    }
  }

  render();

  window.addEventListener('setKey', (event) => {
    key = event.detail;
    render();
  });

  window.addEventListener('setScale', (event) => {
    scale = event.detail;
    render();
  });

  window.addEventListener('setIndicator', (event) => {
    indicator = event.detail;
    render();
  });

  window.addEventListener('setProgressiveDisclosure', () => {
    progressiveDisclosure = document.getElementById(
      'progressive-disclosure'
    ).checked;
    render();
  });

  window.addEventListener('setInterval', (event) => {
    interval = event.detail;
    render();
  });

  window.addEventListener('setNote', (event) => {
    const newDots = fretboard.dots.map((dot) => {
      dot.input = false;
      dot.close = false;

      const note = `${dot.note}${dot.octave}`;

      if (progressiveDisclosure) {
        const distance = Interval.distance(note, event.detail);
        if (Math.abs(Interval.num(distance)) <= interval) {
          dot.close = true;
        }
      }

      if (dot && event.detail === note) {
        dot.input = true;
      }

      return dot;
    });

    render(newDots);
  });

  window.addEventListener('setColor', (event) => {
    color = event.detail;
    render();
  });
</script>
